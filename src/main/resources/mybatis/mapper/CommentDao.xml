<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.choyoujin.DAO.CommentDao">

    <!-- 댓글과 대댓글을 계층적으로 검색 -->
    <select id="findAllByPostId" parameterType="int" resultMap="commentResult">
        WITH RECURSIVE CODE_LIST(id, content, tb_user_id, post_id, comment_id, level, PATH, CYCLE) as (
            /* 계층구조의 시작조건 쿼리 */
            SELECT c.id,
                   c.content,
                   c.tb_user_id,
                   c.post_id,
                   c.comment_id,
                   1,
                   ARRAY[c.id] as PATH,
                   false as CYCLE
            FROM gps.yujin.comment c
            WHERE c.comment_id IS NULL
              AND c.post_id = #{postId}
            UNION ALL
            /*하위 데이터를 찾아가기 위한 반복조건 쿼리*/
            SELECT c.id,
                   c.content,
                   c.tb_user_id,
                   c.post_id,
                   c.comment_id,
                   B.level + 1,
                   ARRAY_APPEND(B.PATH, c.id),
                   c.id = any(B.PATH)
            FROM gps.yujin.comment c
                     JOIN CODE_LIST B on c.comment_id  = B.ID
            WHERE c.comment_id = B.id
              AND NOT CYCLE
        )
        SELECT c.id,
               content,
               tb_user_id,
               post_id,
               comment_id,
               path,
               level,
               u.name,
               i.pic_byte
        FROM CODE_LIST c
        LEFT JOIN gps.yujin.tb_user u ON c.tb_user_id = u.email
        LEFT JOIN gps.yujin.image i ON u.image_id = i.id
        ORDER BY path
    </select>

    <!-- ResultMap 정의 -->
    <resultMap id="commentResult" type="com.example.choyoujin.DTO.CommentDto">
        <result property="id" column="id"/>
        <result property="content" column="content"/>
        <result property="level" column="level"/>
        <result property="commentId" column="comment_id"/>
        <result property="postId" column="post_id"/>
    </resultMap>

    <!-- 부모 댓글의 레벨 가져오기 -->
    <select id="getCommentLevel" resultType="int" parameterType="int">
        SELECT level FROM comment WHERE id = #{id}
    </select>

<!--    댓글 번호로 댓글 정보 가져오기-->
    <select id="findById" resultType="com.example.choyoujin.DTO.CommentDto">
        select * from comment
        where id = #{id}
    </select>

<!--    댓글 저장하기-->
    <insert id="saveComment" parameterType="com.example.choyoujin.DTO.CommentDto">
        insert into comment (content, tb_user_id, post_id, level)
        values (#{content}, #{email}, #{postId}, 0)
    </insert>

<!--    대댓글 저장하기-->
    <insert id="saveReply" parameterType="com.example.choyoujin.DTO.CommentDto">
        insert into comment (content, tb_user_id, comment_id, level)
        values (#{content}, #{email}, #{commentId}, #{level})
    </insert>

    <!-- 대댓글 조회 -->
    <select id="selectReplies" parameterType="int" resultType="com.example.choyoujin.DTO.CommentDto">
        SELECT * FROM comment
        WHERE post_id = #{postId}
        ORDER BY level ASC, id ASC;
    </select>

</mapper>